<?php

namespace Feature\StoreTests;

use App\Models\Attachment;
use App\Models\Task;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;
use Tymon\JWTAuth\Facades\JWTAuth;

class StoreAttachmentControllerTest extends TestCase
{

    use RefreshDatabase;
    use WithFaker;

    /**
     * @test
     */
    public function attachment_can_be_created()
    {
        Storage::fake('local');

        $user = User::factory()->create();
        $token = JWTAuth::fromUser($user);
        $task = Task::factory()->create();

        $url = '/api/attachments/' . $task->id . '/createAttachment';

        $fakeFile = UploadedFile::fake()->create('document.pdf', 100, 'application/pdf');

        $payload = [

            'file' => [$fakeFile],
            'file_name' => [$this->faker->words(3, true)],
            // 'user_id' is taken from the authenticated user in your controller
            // 'task_id' is taken from the route parameter in your controller
            // 'system_name' is generated by the controller
            // 'type_MIME' is taken from the uploaded file by the controller
            // 'byte_size' is taken from the uploaded file by the controller
            // 'store_path' is generated by the controller
        ];

        // important --> When sending files, you use `post` not `postJson`.
        $response = $this->withToken($token)
            ->post($url, $payload);

        $response->assertStatus(201);

        $responseData = $response->json();

        $this->assertNotNull($responseData['id']);
        $this->assertEquals($task->id, $responseData['task_id']);
        $this->assertEquals($user->id, $responseData['user_id']);
        $this->assertEquals($payload['file_name'][0], $responseData['file_name']);
        $this->assertNotNull($responseData['system_name']);
        $this->assertEquals($fakeFile->getMimeType(), $responseData['type_MIME']);
        $this->assertEquals($fakeFile->getSize(), $responseData['byte_size']);
        $this->assertStringContainsString('attachments/', $responseData['store_path']);

        $this->assertDatabaseHas('attachments', [
            'task_id' => $task->id,
            'user_id' => $user->id,
            'file_name' => $payload['file_name'][0],
            'type_MIME' => $fakeFile->getMimeType(),
            'byte_size' => $fakeFile->getSize(),
        ]);


        Storage::disk('local')->assertExists($responseData['store_path']);
    }

}
